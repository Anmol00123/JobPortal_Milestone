{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class JobserviceService {\n  constructor(httpService, router) {\n    this.httpService = httpService;\n    this.router = router;\n    this.token = null;\n    this.headers_object = new HttpHeaders();\n    this.updateJobDetails = new Job();\n  }\n  addJob(job) {\n    console.log(\"adding job method\");\n    console.log(job);\n    const headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8');\n    return this.httpService.post(\"http://localhost:8081/job/postJob\", job, {\n      responseType: 'text',\n      headers\n    });\n  }\n  update(job) {\n    console.log(\"inside update job\");\n    console.log(job);\n    const headers = new HttpHeaders().set('Content_Type', 'application/json; charset=utf-8');\n    return this.httpService.put(\"http://localhost:8081/job/update\", job, {\n      responseType: 'text',\n      headers\n    });\n  }\n  deleteJob(id) {\n    console.log(\"checking deletion operation\");\n    console.log(id);\n    return this.httpService.delete(\"http://localhost:8081/job/delete/\" + id);\n  }\n  getJobById(id) {\n    console.log(\"Getting job by id method\");\n    console.log(id);\n    return this.httpService.get(\"http://localhost:8081/get/\" + id);\n  }\n  authenticate(username, password) {\n    return this.httpService.post(\"http://localhost:8081/authenticate\", {\n      username,\n      password\n    }).pipe(map(userData => {\n      console.log(userData.token);\n      sessionStorage.setItem(\"username\", username);\n      let tokenStr = \"Bearer \" + userData.token;\n      sessionStorage.setItem(\"token\", tokenStr);\n      console.log(\"token\", sessionStorage.getItem(\"token\"));\n      return userData;\n    }));\n  }\n  register(username, password, role) {\n    alert(\"Registering as \" + role);\n    return this.httpService.post(\"http://localhost:8081/register\", {\n      username,\n      password,\n      role\n    }).pipe(map(userData => {\n      return userData;\n    }));\n  }\n  //roles applicant,ustaffadmin,admcommitemember\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(\"username\");\n    console.log(user);\n    console.log(!(user === null));\n    return !(user === null);\n  }\n  isAdmin() {\n    let role = sessionStorage.getItem(\"role\");\n    console.log(\"ROLE  ...\" + role);\n    return !(role === \"admin\");\n  }\n  logOut() {\n    sessionStorage.removeItem(\"username\");\n    sessionStorage.removeItem(\"role\");\n    sessionStorage.clear();\n    this.router.navigate(['/login']);\n  }\n}\nJobserviceService.ɵfac = function JobserviceService_Factory(t) {\n  return new (t || JobserviceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nJobserviceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: JobserviceService,\n  factory: JobserviceService.ɵfac,\n  providedIn: 'root'\n});\nexport class User {}\nexport class JobApplication {}\nexport class Skill {}\nexport class Recruiter {}\nexport class BookmarkedFreelancer {}\nexport class Feedback {}\nexport class Freelancer {}\nexport class SkillExperience {}\nexport class BookmarkedJob {}\nexport class Job {}","map":{"version":3,"mappings":"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","names":["HttpHeaders","map","JobserviceService","constructor","httpService","router","Job","addJob","job","console","log","headers","set","post","responseType","update","put","deleteJob","id","delete","getJobById","get","authenticate","username","password","pipe","userData","token","sessionStorage","setItem","tokenStr","getItem","register","role","alert","isUserLoggedIn","user","isAdmin","logOut","removeItem","clear","navigate","factory","providedIn","User","JobApplication","Skill","Recruiter","BookmarkedFreelancer","Feedback","Freelancer","SkillExperience","BookmarkedJob"],"sourceRoot":"","sources":["C:\\Users\\Administrator\\job4\\src\\app\\jobservice.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { map } from 'rxjs/operators';\n@Injectable({\n  providedIn: 'root'\n})\nexport class JobserviceService {\n  user!: User;\n  role!: string;\n  token = null;\n  headers_object = new HttpHeaders();\n  constructor(private httpService: HttpClient, private router: Router) { }\n  updateJobDetails: Job = new Job();\n\n  public addJob(job: Job) {\n    console.log(\"adding job method\");\n    console.log(job);\n    const headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8');\n\n    return this.httpService.post(\"http://localhost:8081/job/postJob\", job, { responseType: 'text' as 'json', headers });\n\n  }\n\n  public update(job: Job) {\n    console.log(\"inside update job\");\n    console.log(job);\n    const headers = new HttpHeaders().set('Content_Type', 'application/json; charset=utf-8');\n    return this.httpService.put(\"http://localhost:8081/job/update\", job, { responseType: 'text' as 'json', headers });\n  }\n\n  public deleteJob(id: number) {\n    console.log(\"checking deletion operation\");\n    console.log(id);\n    return this.httpService.delete(\"http://localhost:8081/job/delete/\" + id);\n  }\n\n  public getJobById(id: number) {\n    console.log(\"Getting job by id method\");\n    console.log(id);\n    return this.httpService.get(\"http://localhost:8081/get/\" + id);\n  }\n\n\n  authenticate(username: any, password: any) {\n    return this.httpService\n      .post<any>(\"http://localhost:8081/authenticate\", { username, password })\n      .pipe(\n        map(userData => {\n          console.log(userData.token)\n          sessionStorage.setItem(\"username\", username);\n          let tokenStr = \"Bearer \" + userData.token;\n          sessionStorage.setItem(\"token\", tokenStr);\n          console.log(\"token\", sessionStorage.getItem(\"token\"))\n          return userData;\n        })\n      );\n  }\n\n\n  register(username: any, password: any, role: any) {\n    alert(\"Registering as \" + role)\n    return this.httpService\n      .post<any>(\"http://localhost:8081/register\", { username, password, role })\n      .pipe(\n        map((userData: any) => {\n          return userData;\n        })\n      );\n  }\n  //roles applicant,ustaffadmin,admcommitemember\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(\"username\");\n    console.log(user);\n    console.log(!(user === null));\n    return !(user === null);\n  }\n  isAdmin() {\n    let role = sessionStorage.getItem(\"role\");\n    console.log(\"ROLE  ...\" + role);\n    return !(role === \"admin\")\n  }\n  logOut() {\n    sessionStorage.removeItem(\"username\");\n    sessionStorage.removeItem(\"role\");\n    sessionStorage.clear();\n    this.router.navigate(['/login'])\n  }\n}\nexport class User {\n  username!: string;\n  password!: string;\n  role!: string;\n\n} export class JobApplication {\n\n  jobApplicationId!: number;\n  job!: Job;\n  appliedDate!: Date;\n  coverLetter!: string;\n\n} export class Skill {\n\n  id: number\n  skillId!: number;\n  name!: string;\n  description!: string;\n\n} export class Recruiter {\n  recruiterId!: number;\n  firstName!: string;\n  lastName!: string;\n  postedJobs!: Job[];\n  feedbacks!: Feedback[];\n  freelancers!: BookmarkedFreelancer[];\n\n} export class BookmarkedFreelancer {\n  bookMarkedFreeid!: number;\n  skill!: Skill;\n  freelancer!: Freelancer;\n  bookmarkedBy!: Recruiter;\n\n}\nexport class Feedback {\n  feedbackId!: number;\n  rating!: number;\n  comment!: string;\n  createdBy!: Recruiter;\n  createdFor!: Freelancer;\n\n} export class Freelancer {\n  freelancerId!: number;\n  firstName!: string;\n  lastName!: string;\n  password!: string;\n  appliedJobs!: JobApplication[];\n  feedbacks!: Feedback;\n  skills!: SkillExperience;\n  bookmarkedJobs!: BookmarkedJob[];\n}\n\nexport class SkillExperience {\n  skillExperienceid!: number;\n  years!: number;\n  freelancer!: Freelancer;\n  skill!: Skill;\n\n}\nexport class BookmarkedJob {\n  bookmarkedjobId!: number;\n  skill!: Skill;\n  job!: Job;\n  freelancer!: Freelancer;\n\n}\nexport class Job {\n\n  jobId!: number;\n  skill!: Skill;\n  postedBy!: Recruiter;\n  postedDate!: Date;\n  awardedTo!: Freelancer;\n  active!: Boolean;\n  jobApplications!: JobApplication;\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}