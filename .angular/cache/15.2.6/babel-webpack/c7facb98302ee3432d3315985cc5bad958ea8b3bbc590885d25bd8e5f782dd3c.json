{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class JobapplicationserviceService {\n  constructor(httpService) {\n    this.httpService = httpService;\n    this.token = null;\n    this.headers_object = new HttpHeaders();\n  }\n  //POST Method\n  applyToJobApplication(jobapplication) {\n    console.log(\"Apply to Job Method\");\n    console.log(jobapplication);\n    const headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8');\n    return this.httpService.post(\"http://localhost:8081/JobApplicationController/SaveJobApplication\", jobapplication, {\n      responseType: 'text',\n      headers\n    });\n    // return this.httpService.post(\"http://localhost:1111/JobApplicationController/SaveJobApplication\", jobapplication); //,{ headers, responseType:'text' as 'json' });\n  }\n  //PUT Mapping\n  updateApplication(jobapplication) {\n    console.log(\"Update Job Application\");\n    console.log(jobapplication);\n    const headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8');\n    return this.httpService.put(\"http://localhost:8081/JobApplicationController/UpdateJobApplication\", jobapplication, {\n      headers,\n      responseType: 'text'\n    });\n  }\n  //DELETE Mapping\n  dltJobApplication(jobId) {\n    console.log(\"Delete Job Application\");\n    const headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8');\n    return this.httpService.delete(\"http://localhost:8081/JobApplicationController/DeleteJobApplication/jobId\", {\n      headers,\n      responseType: 'text'\n    });\n  }\n  // //GET Method\n  findByIdJobApplication(jobId) {\n    console.log(\"Find Applications for a Job method\");\n    const headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8');\n    return this.httpService.get(\"http://localhost:8081/JobApplicationController/GetJobApplicationById/\" + jobId, {\n      headers,\n      responseType: 'text'\n    });\n  }\n}\nJobapplicationserviceService.ɵfac = function JobapplicationserviceService_Factory(t) {\n  return new (t || JobapplicationserviceService)(i0.ɵɵinject(i1.HttpClient));\n};\nJobapplicationserviceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: JobapplicationserviceService,\n  factory: JobapplicationserviceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAQ9D,OAAM,MAAOC,4BAA4B;EAKvCC,YAAoBC,WAAsB;IAAtB,gBAAW,GAAXA,WAAW;IAF/B,UAAK,GAAC,IAAI;IACV,mBAAc,GAAG,IAAIH,WAAW,EAAE;EACY;EAE7C;EACOI,qBAAqB,CAACC,cAA6B;IACzDC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClCD,OAAO,CAACC,GAAG,CAACF,cAAc,CAAC;IAC3B,MAAMG,OAAO,GAAG,IAAIR,WAAW,EAAE,CAACS,GAAG,CAAC,cAAc,EAAE,iCAAiC,CAAC;IAEzF,OAAO,IAAI,CAACN,WAAW,CAACO,IAAI,CAAC,mEAAmE,EAACL,cAAc,EAAC;MAAEM,YAAY,EAAC,MAAgB;MAACH;IAAO,CAAC,CAAC;IAEzJ;EACD;EAEE;EACKI,iBAAiB,CAACP,cAA8B;IACrDC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACrCD,OAAO,CAACC,GAAG,CAACF,cAAc,CAAC;IAC3B,MAAMG,OAAO,GAAG,IAAIR,WAAW,EAAE,CAACS,GAAG,CAAC,cAAc,EAAE,iCAAiC,CAAC;IACxF,OAAO,IAAI,CAACN,WAAW,CAACU,GAAG,CAAC,qEAAqE,EAACR,cAAc,EAAC;MAAEG,OAAO;MAAEG,YAAY,EAAC;IAAgB,CAAE,CAAC;EAC9J;EAGA;EACOG,iBAAiB,CAACC,KAAa;IACpCT,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACjC,MAAMC,OAAO,GAAG,IAAIR,WAAW,EAAE,CAACS,GAAG,CAAC,cAAc,EAAE,iCAAiC,CAAC;IACzF,OAAO,IAAI,CAACN,WAAW,CAACa,MAAM,CAAC,2EAA2E,EAAC;MAAER,OAAO;MAAEG,YAAY,EAAC;IAAgB,CAAE,CAAC;EAC3J;EAEA;EACOM,sBAAsB,CAACF,KAAa;IACzCT,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;IAC9C,MAAMC,OAAO,GAAG,IAAIR,WAAW,EAAE,CAACS,GAAG,CAAC,cAAc,EAAE,iCAAiC,CAAC;IAC3F,OAAO,IAAI,CAACN,WAAW,CAACe,GAAG,CAAiB,uEAAuE,GAACH,KAAK,EAAC;MAAEP,OAAO;MAAEG,YAAY,EAAC;IAAgB,CAAE,CAAC;EACvK;;;mBAvCWV,4BAA4B;AAAA;;SAA5BA,4BAA4B;EAAAkB,SAA5BlB,4BAA4B;EAAAmB,YAF3B;AAAM","names":["HttpHeaders","JobapplicationserviceService","constructor","httpService","applyToJobApplication","jobapplication","console","log","headers","set","post","responseType","updateApplication","put","dltJobApplication","jobId","delete","findByIdJobApplication","get","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Administrator\\job4\\src\\app\\jobapplicationservice.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { JobApplication, User } from './jobservice.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JobapplicationserviceService {\n  user!:User;\n  role!:string;\n  token=null;\n  headers_object = new HttpHeaders();\n  constructor(private httpService:HttpClient) { }\n\n   //POST Method\n   public applyToJobApplication(jobapplication:JobApplication) {\n    console.log(\"Apply to Job Method\");\n    console.log(jobapplication);\n    const headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8');\n    \n   return this.httpService.post(\"http://localhost:8081/JobApplicationController/SaveJobApplication\",jobapplication,{ responseType:'text' as 'json',headers});\n\n   // return this.httpService.post(\"http://localhost:1111/JobApplicationController/SaveJobApplication\", jobapplication); //,{ headers, responseType:'text' as 'json' });\n  }\n\n    //PUT Mapping\n  public updateApplication(jobapplication: JobApplication) {\n    console.log(\"Update Job Application\");\n    console.log(jobapplication);\n    const headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8');\n    return this.httpService.put(\"http://localhost:8081/JobApplicationController/UpdateJobApplication\",jobapplication,{ headers, responseType:'text' as 'json' });\n  }\n\n  \n  //DELETE Mapping\n  public dltJobApplication(jobId: number) {\n    console.log(\"Delete Job Application\");\n        const headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8');\n       return this.httpService.delete(\"http://localhost:8081/JobApplicationController/DeleteJobApplication/jobId\",{ headers, responseType:'text' as 'json' });\n  }\n\n  // //GET Method\n  public findByIdJobApplication(jobId: number) :Observable<any>{\n    console.log(\"Find Applications for a Job method\");\n       const headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8');\n    return this.httpService.get<JobApplication>(\"http://localhost:8081/JobApplicationController/GetJobApplicationById/\"+jobId,{ headers, responseType:'text' as 'json' });\n  }\n\n \n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}